Operations:
	R(A) 	- Register at index A
	RT(A) 	- ReferenceTable at index A
	RI		- RegisterIndex (1B)
	RTI		- ReferenceTableIndex (2B)

MNEMONIC		Description																EXTRA VALUES
nop				no operation															0:
loadconstant	R(RI) = RT(RTI)															2: RI, RTI 
move			R(RI1) = R(RI2)															2: RI1, RI2
returnval		return R(RI), clear all R												1: RI
return			return, clear all R														0:
new				R(RI) = new RT(RTI)														2: RI, RTI
newarray		R(RI1) = new typeID[R(RI2)]												3: RI1, RI2, typeID (1B)
delete			delete R(RI)															1: RI
getarrayelem	R(RI3) = R(RI1)[R(RI2)]													3: RI1, RI2, RI3
setarrayelem	R(RI1)[R(RI2)] = R(RI3)													3: RI1, RI2, RI3
getobjfield		R(RI2) = R(RI1).RT(RTI)													3: RI1, RI2, RTI
setobjfield		R(RI1).RT(RTI) = R(RI2)													3: RI1, RI2, RTI
x2y				R(RI2) = (newType) R(RI1)												3: RI1, RI2, newTypeID (1B)
checkcast		throw CE if not castable												2: RI, RTI
or				R(RI3) = R(RI1) | R(RI2)												3: RI1, RI2, RI3
and				R(RI3) = R(RI1) & R(RI2)												3: RI1, RI2, RI3
not				R(RI2) = !R(RI1)														2: RI1, RI2
xor				R(RI3) = R(RI1) ^ R(RI2)												3: RI1, RI2, RI3
lshift			R(RI3) = R(RI1) << R(RI2)												3: RI1, RI2, RI3
rshift			R(RI3) = R(RI1) >> R(RI2)												3: RI1, RI2, RI3
add				R(RI3) = R(RI1) + R(RI2)												3: RI1, RI2, RI3
sub				R(RI3) = R(RI1) - R(RI2)												3: RI1, RI2, RI3
mul				R(RI3) = R(RI1) * R(RI2)												3: RI1, RI2, RI3
div				R(RI3) = R(RI1) / R(RI2)												3: RI1, RI2, RI3
rem				R(RI3) = R(RI1) % R(RI2)												3: RI1, RI2, RI3
neg				R(RI2) = -R(RI1)														2: RI1, RI2
inc				R(RI)++																	1: RI
dec				R(RI)--																	1: RI
callnormal		m = R(RI1), R(RI3) = m(R(RI2))											3: RI1, RI2, RI3
callnative		m = R(RI1), R(RI3) = m(R(RI2))											3: RI1, RI2, RI3
callspecial		m = R(RI1), m(R(RI2))													2: RI1, RI2
if				if(!R(RI)) goto pos														2: RI, pos (2B)
goto			goto pos																1: pos (2B)
comp			R(RI3) = R(RI1) comp R(RI2)												4: RI1, RI2, RI3, comp (1B)
instanceof		R(RI2) = R(RI1) instanceof RT(RTI)										3: RI1, RI2, RTI
arraylen		R(RI2) = R(RI1).length													2: RI1, RI2
stringlen		R(RI2) = R(RI1).length													2: RI1, RI2
strcat			R(RI3) = R(RI1) + R(RI2)												3: RI1, RI2, RI3
sizeof			R(RI2) = sizeof(R(RI1))													2: RI1, RI2
swap			x = R(RI1), R(RI1) = R(RI2), R(RI2) = x									2: RI1, RI2
throw			throw R(RI)																1: RI
tostr			R(RI2) = "R(RI1)"														2: RI1, RI2
getstatic		R(RI) = RT(RTI1).RT(RTI2)												3: RI, RTI1, RTI2
setstatic		RT(RTI1).RT(RTI2) = R(RI)												3: RI, RTI1, RTI2
loadnull		R(RI) = null															1: RI
loadm1			R(RI) = -1																1: RI
load0			R(RI) = 0																1: RI
load1			R(RI) = 1																1: RI
load2			R(RI) = 2																1: RI
load5			R(RI) = 5																1: RI
loadfalse		R(RI) = false															1: RI
loadtrue		R(RI) = true															1: RI
getstrchar		R(RI3) = R(RI1)[R(RI2)]													3: RI1, RI2, RI3
setstrchar		R(RI1)[R(RI2)] = R(RI3)													3: RI1, RI2, RI3
strfromarr		R(RI2) = (string) R(RI1)												2: RI1, RI2
newarraydyn		R(RI1) = new R(RI2)[R(RI3)]												3: RI1, RI2, RI3
getptr			R(RI1) = addressof R(RI2)												2: RI1, RI2
derefptr		R(RI1) = valueof R(RI2)													2: RI1, RI2
updateptr		valueof R(RI1) = R(RI2)													2: RI1, RI2
isprimitive		R(RI1) = isprimitive R(RI2)												2: RI1, RI2
getnormal		R(RI) = RT(RTI2).RT(RTI1)												3: RI, RTI1, RTI2
getvirtual		R(RI2) = R(RI1).RT(RTI1) OR fallback: R(RI2) = RT(RTI2).RT(RTI1)		4: RI1, RI2, RTI1, RTI2
getexception	R(RI) = current exception												1: RI